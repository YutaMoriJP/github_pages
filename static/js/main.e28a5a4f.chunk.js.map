{"version":3,"sources":["components/Drawer/Drawer.js","components/useHooks/util.js","components/List/List.js","components/Layout/Navbar.js","components/Layout/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["Transition","React","forwardRef","props","ref","Slide","direction","Drawer","checked","setChecked","open","setOpen","children","SaveButton","List","handleClose","name","data","theme","localStorage","setItem","JSON","stringify","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","elevation","DialogTitle","id","DialogContent","DialogActions","onClick","Moon","styled","Brightness2Icon","Sun","Brightness7Icon","useStyles","makeStyles","root","width","maxWidth","backgroundColor","palette","background","paper","list","margin","display","justifyContent","ListComponent","classes","console","log","className","component","aria-label","ListItem","button","Checkbox","color","value","onChange","prevChecked","icon","checkedIcon","Divider","useStyle","marginLeft","nav","Button","startIcon","Navbar","useState","AppBar","position","Toolbar","IconButton","prevOpen","Layout","Global","createGlobalStyle","backgorund","themeColor","dark","light","typography","textAlign","padding","height","maxHeight","App","parse","getItem","isDark","setIsDark","useMemo","createMuiTheme","type","primary","main","ThemeProvider","Container","Grid","container","spacing","justify","item","xs","sm","md","lg","Paper","Typography","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e28a5a4f.chunk.js","sourcesContent":["import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { createStorage } from \"../useHooks/util\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function Drawer({\n  checked,\n  setChecked,\n  open,\n  setOpen,\n  children,\n  SaveButton,\n  List,\n}) {\n  const handleClose = () => {\n    setOpen(false);\n    createStorage(\"userSetting\", { theme: checked });\n  };\n  return (\n    <>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n        elevation={20}\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{children}</DialogTitle>\n        <DialogContent>\n          <List checked={checked} setChecked={setChecked} />\n        </DialogContent>\n        <DialogActions>\n          <SaveButton onClick={handleClose} />\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","export const createStorage = (name, data) =>\n  localStorage.setItem(name, JSON.stringify(data));\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\nimport Brightness2Icon from \"@material-ui/icons/Brightness2\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport styled from \"styled-components\";\n\nconst Moon = styled(Brightness2Icon)`\n  width: 50px;\n  height: 30px;\n  color: #212529;\n`;\n\nconst Sun = styled(Brightness7Icon)`\n  width: 50px;\n  height: 30px;\n  color: orange;\n`;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 300,\n    maxWidth: 300,\n    backgroundColor: theme.palette.background.paper,\n  },\n  list: {\n    margin: 0,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\n\nexport default function ListComponent({ checked, setChecked }) {\n  const classes = useStyles();\n  const handleChange = () => setChecked(prevChecked => !prevChecked);\n  console.log(checked);\n  return (\n    <div className={classes.root}>\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\n        <ListItem button className={classes.list}>\n          <p>Choose {!checked ? \"Dark\" : \"Light\"} Theme</p>\n          <Checkbox\n            color=\"primary\"\n            value={checked}\n            onChange={handleChange}\n            icon={<Sun />}\n            checkedIcon={<Moon />}\n          />\n        </ListItem>\n        <Divider />\n      </List>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"../Drawer/Drawer\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport Button from \"@material-ui/core/Button\";\nimport ListComponent from \"../List/List\";\n\nconst useStyle = makeStyles({\n  icon: { marginLeft: \"auto\" },\n  nav: { backgroundColor: \"transparent\" },\n});\n\nconst SaveButton = ({ onClick }) => (\n  <Button onClick={onClick} startIcon={<SaveIcon />}>\n    Save\n  </Button>\n);\n\nconst Navbar = ({ checked, setChecked }) => {\n  const classes = useStyle();\n  const [open, setOpen] = useState(false);\n  const handleClick = () => setOpen(prevOpen => !prevOpen);\n  return (\n    <>\n      <AppBar position=\"sticky\" className={classes.nav}>\n        <Toolbar elevation={22}>\n          <IconButton className={classes.icon} onClick={handleClick}>\n            <SettingsIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        checked={checked}\n        setChecked={setChecked}\n        open={open}\n        setOpen={setOpen}\n        SaveButton={SaveButton}\n        List={ListComponent}\n      >\n        User Setting\n      </Drawer>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\n\nconst Layout = ({ children, checked, setChecked }) => {\n  return (\n    <>\n      <Navbar checked={checked} setChecked={setChecked} />\n      {children}\n    </>\n  );\n};\n\nexport default Layout;\n","import React, { useMemo, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  makeStyles,\n} from \"@material-ui/core/styles\";\nimport {\n  createGlobalStyle,\n  ThemeProvider as StyledThemeProvider,\n} from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport Layout from \"./components/Layout/Layout\";\nconst Global = createGlobalStyle`\n  html {\n    box-sizing: border-box\n    }\n  body {\n    background-color: ${props => props.theme.backgorund};\n    color: ${({ theme }) => theme.color}\n  }\n`;\n\nconst themeColor = {\n  dark: {\n    backgorund: \"#212529\",\n    color: \"#e9ecef\",\n  },\n  light: {\n    backgorund: \"#e9ecef\",\n    color: \"#212529\",\n  },\n};\n\nconst useStyle = makeStyles({\n  typography: { textAlign: \"center\" },\n  button: { margin: \"auto\", display: \"block\" },\n  paper: {\n    padding: 10,\n    maxWidth: 400,\n    height: 200,\n    maxHeight: 300,\n    margin: 10,\n  },\n});\n\nfunction App() {\n  const [isDark, setIsDark] = useState(\n    JSON.parse(localStorage.getItem(\"userSetting\"))?.theme ?? true\n  );\n  const theme = useMemo(() =>\n    createMuiTheme(\n      {\n        palette: {\n          type: isDark ? \"dark\" : \"light\",\n          primary: { main: isDark ? \"#91a7ff\" : \"#364fc7\" },\n        },\n      },\n      []\n    )\n  );\n  const classes = useStyle();\n  console.log(isDark);\n  return (\n    <StyledThemeProvider theme={isDark ? themeColor.dark : themeColor.light}>\n      <ThemeProvider theme={theme}>\n        <Global />\n        <Layout checked={isDark} setChecked={setIsDark}>\n          <Container>\n            <Grid container spacing={1} justify=\"center\">\n              <Grid item xs={10} sm={8} md={5} lg={4}>\n                <Paper elevation={22} className={classes.paper}>\n                  <Typography variant=\"h4\" className={classes.typography}>\n                    GITHUB PAGES\n                  </Typography>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Container>\n        </Layout>\n      </ThemeProvider>\n    </StyledThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}