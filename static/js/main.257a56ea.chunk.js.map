{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Global","createGlobalStyle","props","theme","backgorund","color","themeColor","dark","light","useStyle","makeStyles","typography","textAlign","button","margin","display","paper","padding","maxWidth","height","maxHeight","App","useState","isDark","setIsDark","useMemo","createMuiTheme","palette","type","primary","main","classes","ThemeProvider","Container","Grid","container","spacing","justify","item","xs","md","lg","Paper","elevation","className","Typography","variant","Button","fullWidth","onClick","prevIsDark","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAgBMA,EAASC,YAAH,oIAKY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,cAChC,qBAAGD,MAAkBE,SAI5BC,EAAa,CACjBC,KAAM,CACJH,WAAY,UACZC,MAAO,WAETG,MAAO,CACLJ,WAAY,UACZC,MAAO,YAILI,EAAWC,YAAW,CAC1BC,WAAY,CAAEC,UAAW,UACzBC,OAAQ,CAAEC,OAAQ,OAAQC,QAAS,SACnCC,MAAO,CACLC,QAAS,GACTC,SAAU,IACVC,OAAQ,IACRC,UAAW,IACXN,OAAQ,MA4CGO,MAxCf,WAAgB,IAAD,EACeC,oBAAS,GADxB,mBACNC,EADM,KACEC,EADF,KAEPrB,EAAQsB,mBAAQ,kBACpBC,YAAe,CACbC,QAAS,CACPC,KAAML,EAAS,OAAS,QACxBM,QAAS,CAAEC,KAAMP,EAAS,UAAY,iBAItCQ,EAAUtB,IAChB,OACE,cAAC,IAAD,CAAqBN,MAAOoB,EAASjB,EAAWC,KAAOD,EAAWE,MAAlE,SACE,eAACwB,EAAA,EAAD,CAAe7B,MAAOA,EAAtB,UACE,cAACH,EAAD,IACA,cAACiC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAApC,SACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACE,eAACC,EAAA,EAAD,CAAOC,UAAW,GAAIC,UAAWb,EAAQf,MAAzC,UACE,cAAC6B,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWb,EAAQpB,WAA5C,0BAGA,cAACoC,EAAA,EAAD,CACEC,WAAW,EACXJ,UAAWb,EAAQlB,OACnBoC,QAAS,kBAAMzB,GAAU,SAAA0B,GAAU,OAAKA,MACxC7C,MAAM,UACNyC,QAAQ,YALV,yCC3DDK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.257a56ea.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  makeStyles,\n} from \"@material-ui/core/styles\";\nimport {\n  createGlobalStyle,\n  ThemeProvider as StyledThemeProvider,\n} from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Global = createGlobalStyle`\n  html {\n    box-sizing: border-box\n    }\n  body {\n    background-color: ${props => props.theme.backgorund};\n    color: ${({ theme }) => theme.color}\n  }\n`;\n\nconst themeColor = {\n  dark: {\n    backgorund: \"#212529\",\n    color: \"#e9ecef\",\n  },\n  light: {\n    backgorund: \"#e9ecef\",\n    color: \"#212529\",\n  },\n};\n\nconst useStyle = makeStyles({\n  typography: { textAlign: \"center\" },\n  button: { margin: \"auto\", display: \"block\" },\n  paper: {\n    padding: 10,\n    maxWidth: 400,\n    height: 200,\n    maxHeight: 300,\n    margin: 10,\n  },\n});\n\nfunction App() {\n  const [isDark, setIsDark] = useState(true);\n  const theme = useMemo(() =>\n    createMuiTheme({\n      palette: {\n        type: isDark ? \"dark\" : \"light\",\n        primary: { main: isDark ? \"#91a7ff\" : \"#364fc7\" },\n      },\n    })\n  );\n  const classes = useStyle();\n  return (\n    <StyledThemeProvider theme={isDark ? themeColor.dark : themeColor.light}>\n      <ThemeProvider theme={theme}>\n        <Global />\n        <Container>\n          <Grid container spacing={1} justify=\"center\">\n            <Grid item xs={10} md={5} lg={4}>\n              <Paper elevation={22} className={classes.paper}>\n                <Typography variant=\"h4\" className={classes.typography}>\n                  Github pages\n                </Typography>\n                <Button\n                  fullWidth={true}\n                  className={classes.button}\n                  onClick={() => setIsDark(prevIsDark => !prevIsDark)}\n                  color=\"primary\"\n                  variant=\"contained\"\n                >\n                  Switch Theme\n                </Button>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </StyledThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}